package exo;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.LinkedList;

public class Server {
	// id de connection 
	private static int uniqueId ; 

	//liste des clients 
	private LinkedList al ; 

	// le port 
	private int port ; 

	private boolean keepGoing ; 

	public Server(String [] args){
		// check if port number is given 
		if (args.length != 1){
			System.err.println("Usage: java " + Server.class.getName() + " port");
			System.exit(1);
		}

		//init du port 
		this.port = Integer.parseInt(args[0]); 

		// init de la liste 
		this.al = new LinkedList<ClientThread>() ; 
	}

	public void start() {
		this.keepGoing = true ; 
		try {
			// créer la socket et attente de connexion 
			ServerSocket serverSocket = new ServerSocket(this.port);

			while (this.keepGoing){
				//inint la socket d'écoute 
				Socket socket = serverSocket.accept() ; 

				//juste pour sortir au cas ou il est demandé par un client 
				if (!keepGoing){
					break ; 
				}

				// init du client qui vient de se connecter à la socket 
				ClientThread t = new ClientThread(socket); 

				//on ajoute le client à la liste 
				al.add(t); 

				//on start le client 
				t.start() ; 

			}

			//ce bloc va permettre de quitter le server donc de déconnecter tous les clients connectés 
			try {
				serverSocket.close();
				for(int i = 0; i < al.size(); ++i) {
					ClientThread tc = (ClientThread) al.get(i) ; 
					try {						 
						tc.sInput.close();

						tc.sOutput.close();

						tc.socket.close();

					}

					catch(IOException ioE) {

						// not much I can do

					}
				}
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 

	}




	public static void main(String args[]) {



	}
}








package exo;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.Date;

class ClientThread implements Runnable {
	Server s = null ; 
	Socket client = null ; 
	ObjectInputStream sInput ; 
	ObjectOutputStream sOutput ; 

	int id ; 

	String userName ; 

	ChatMessage cm ; 


	public ClientThread(Socket c , Server s) {
		this.s = s ; 
		this.client = c;
		id = ++s.uniqueId ; 
		try {
			sOutput = new ObjectOutputStream(this.client.getOutputStream());
			sInput  = new ObjectInputStream(this.client.getInputStream());
		}catch (IOException e){
			e.printStackTrace();
			return ; 
		}
	}

	public void start () {

	}
	public void run() {
		// to loop until LOGOUT
		boolean keepGoing = true;
		while(keepGoing) {
			// read a String (which is an object)
			try {
				cm = (ChatMessage) sInput.readObject();
			}
			catch (IOException e) {
				break;             
			}
	
			// the messaage part of the ChatMessage
			String message = cm.getMessage();

			// Switch on the type of message receive
			switch(cm.getType()) {
			
			case ChatMessage.MESSAGE:
				this.s.broadcast(userName + ": " + message);
				break;
			case ChatMessage.LOGOUT:
				this.s.broadcast(userName + " disconnected with a LOGOUT message.");
				keepGoing = false;
				break;
			case ChatMessage.WHOISIN:
				// scan al the users connected
				for(int i = 0; i < al.size(); ++i) {
					ClientThread ct = al.get(i);
					writeMsg((i+1) + ") " + ct.userName + " since " + ct.date);
				}
				break;
			}
		}
		// remove myself from the arrayList containing the list of the
		// connected Clients
		remove(id);
		close();
	}
}